@page "/trasy"
@using front.Models
@inject front.Services.StacjeSerwis stacjeSerwis
@using Blazored.Typeahead

<div class="container mt-4">
    <form id="searchForm" class="row g-3 align-items-end">
        <div class="col-md-3">
            <label for="stacjaPoczatkowa" class="form-label">Stacja początkowa</label>
            <BlazoredTypeahead SearchMethod="SearchStacje"
                   Placeholder="Wpisz nazwę stacji..."
                   @bind-Value="@stacjaPoczatkowa"
                   Debounce="10"
                   id="stacjaPoczatkowa">
                <SelectedTemplate>
                    @context.StopName
                </SelectedTemplate>
                <ResultTemplate>
                    @context.StopName
                </ResultTemplate>
            </BlazoredTypeahead>
        </div>

        <div class="col-md-3">
            <label for="stacjaDocelowa" class="form-label">Stacja docelowa</label>
            <BlazoredTypeahead SearchMethod="SearchStacje"
                   Placeholder="Wpisz nazwę stacji..."
                   @bind-Value="@stacjaDocelowa"
                   Debounce="10"
                   id="stacjaDocelowa">
                <SelectedTemplate>
                    @context.StopName
                </SelectedTemplate>
                <ResultTemplate>
                    @context.StopName
                </ResultTemplate>
            </BlazoredTypeahead>
        </div>

        <div class="input-group" id="datetimepicker" data-td-target-input="nearest" data-td-target-toggle="nearest">
            <input type="datetime-local" class="form-control" data-td-target="#datetimepicker" placeholder="Wybierz datę" />
            @* <span class="input-group-dupa-text" data-td-target="#datetimepicker" data-td-toggle="datetimepicker"> *@
            @*     <i class="fa fa-calendar"></i> *@
            @* </span> *@
        </div>

        <div class="col-md-3">
            <button type="submit" class="btn btn-primary w-100">
                <i class="fa fa-search me-2"></i>Szukaj
            </button>
        </div>
    </form>

    <hr />

    <h5>Trasy</h5>
    <ul class="list-group" id="trasyList">
        @foreach (var trasa in trasy)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                @trasa.Name
                <button class="btn btn-sm btn-outline-warning" @onclick="() => AddToFavorites(trasa)">
                    <i class="fa fa-star"></i>
                </button>
            </li>
        }
    </ul>

    <hr />

    <h5>Ulubione trasy</h5>
    <ul class="list-group" id="favouritesList">
    @foreach (var fav in favouriteTrasy)
    {
        <li class="list-group-item d-flex justify-content-between align-items-center">
            @fav.Name
            <button class="btn btn-sm btn-outline-danger" @onclick="() => RemoveFromFavorites(fav)">
                <i class="fa fa-times"></i>
            </button>
        </li>
    }
    </ul>
</div>

@code {
    private DateTime selectedDate = DateTime.Today;
    private List<Stop>? stacje = new();
    private Stop? stacjaPoczatkowa;
    private Stop? stacjaDocelowa;

    private List<RouteModel> trasy = new()
    {
        new RouteModel { Id = 1, Name = "Warszawa - Kraków" },
        new RouteModel { Id = 2, Name = "Gdańsk - Wrocław" },
        new RouteModel { Id = 3, Name = "Poznań - Katowice" }
    };

    private List<RouteModel> favouriteTrasy = new();

    private void AddToFavorites(RouteModel trasa)
    {
        if (!favouriteTrasy.Any(t => t.Id == trasa.Id))
        {
            trasy.Remove(trasa);
            favouriteTrasy.Add(trasa);
        }
    }

    private void RemoveFromFavorites(RouteModel trasa)
    {
        if (favouriteTrasy.Contains(trasa))
        {
            favouriteTrasy.Remove(trasa);
            trasy.Add(trasa);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        stacje = await stacjeSerwis.GetStacje();
    }

    private Task<IEnumerable<Stop>> SearchStacje(string searchText)
    {
        if (string.IsNullOrWhiteSpace(searchText))
            return Task.FromResult(stacje.AsEnumerable());

        var wyniki = stacje
            .Where(s => s.StopName.Contains(searchText, StringComparison.OrdinalIgnoreCase));

        return Task.FromResult(wyniki);
    }
}